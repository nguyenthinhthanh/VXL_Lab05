
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080028fc  080028fc  000038fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002928  08002928  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002928  08002928  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002928  08002928  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002928  08002928  00003928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800292c  0800292c  0000392c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002930  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  0800293c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  0800293c  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008908  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a72  00000000  00000000  0000c93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0000e3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000060c  00000000  00000000  0000ebc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001793e  00000000  00000000  0000f1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3aa  00000000  00000000  00026b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c84  00000000  00000000  00031eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8b38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e74  00000000  00000000  000b8b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000ba9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028e4 	.word	0x080028e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080028e4 	.word	0x080028e4

0800014c <command_parser_fsm>:
 *      Author: ADMINS
 */

#include "command_parser.h"

void command_parser_fsm(void){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	return;
 8000150:	bf00      	nop
}
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000158:	b580      	push	{r7, lr}
 800015a:	b082      	sub	sp, #8
 800015c:	af00      	add	r7, sp, #0
 800015e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a10      	ldr	r2, [pc, #64]	@ (80001a8 <HAL_UART_RxCpltCallback+0x50>)
 8000166:	4293      	cmp	r3, r2
 8000168:	d119      	bne.n	800019e <HAL_UART_RxCpltCallback+0x46>
		//HAL_UART_Transmit(&huart2, &temp, 1, 100);
		buffer[index_buffer++] = temp;
 800016a:	4b10      	ldr	r3, [pc, #64]	@ (80001ac <HAL_UART_RxCpltCallback+0x54>)
 800016c:	781b      	ldrb	r3, [r3, #0]
 800016e:	1c5a      	adds	r2, r3, #1
 8000170:	b2d1      	uxtb	r1, r2
 8000172:	4a0e      	ldr	r2, [pc, #56]	@ (80001ac <HAL_UART_RxCpltCallback+0x54>)
 8000174:	7011      	strb	r1, [r2, #0]
 8000176:	461a      	mov	r2, r3
 8000178:	4b0d      	ldr	r3, [pc, #52]	@ (80001b0 <HAL_UART_RxCpltCallback+0x58>)
 800017a:	7819      	ldrb	r1, [r3, #0]
 800017c:	4b0d      	ldr	r3, [pc, #52]	@ (80001b4 <HAL_UART_RxCpltCallback+0x5c>)
 800017e:	5499      	strb	r1, [r3, r2]

		if(index_buffer >= MAX_BUFFER_SIZE){
 8000180:	4b0a      	ldr	r3, [pc, #40]	@ (80001ac <HAL_UART_RxCpltCallback+0x54>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	2b1d      	cmp	r3, #29
 8000186:	d902      	bls.n	800018e <HAL_UART_RxCpltCallback+0x36>
			index_buffer = 0;
 8000188:	4b08      	ldr	r3, [pc, #32]	@ (80001ac <HAL_UART_RxCpltCallback+0x54>)
 800018a:	2200      	movs	r2, #0
 800018c:	701a      	strb	r2, [r3, #0]
		}
		buffer_flag = 1;
 800018e:	4b0a      	ldr	r3, [pc, #40]	@ (80001b8 <HAL_UART_RxCpltCallback+0x60>)
 8000190:	2201      	movs	r2, #1
 8000192:	701a      	strb	r2, [r3, #0]

		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000194:	2201      	movs	r2, #1
 8000196:	4906      	ldr	r1, [pc, #24]	@ (80001b0 <HAL_UART_RxCpltCallback+0x58>)
 8000198:	4808      	ldr	r0, [pc, #32]	@ (80001bc <HAL_UART_RxCpltCallback+0x64>)
 800019a:	f001 fe3f 	bl	8001e1c <HAL_UART_Receive_IT>
	}
}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40004400 	.word	0x40004400
 80001ac:	2000004a 	.word	0x2000004a
 80001b0:	20000028 	.word	0x20000028
 80001b4:	2000002c 	.word	0x2000002c
 80001b8:	2000004b 	.word	0x2000004b
 80001bc:	2000007c 	.word	0x2000007c

080001c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c4:	f000 fa3c 	bl	8000640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c8:	f000 f822 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001cc:	f000 f8d8 	bl	8000380 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d0:	f000 f86e 	bl	80002b0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80001d4:	f000 f8aa 	bl	800032c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start(&hadc1);
 80001d8:	4809      	ldr	r0, [pc, #36]	@ (8000200 <main+0x40>)
 80001da:	f000 fb6b 	bl	80008b4 <HAL_ADC_Start>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80001de:	2201      	movs	r2, #1
 80001e0:	4908      	ldr	r1, [pc, #32]	@ (8000204 <main+0x44>)
 80001e2:	4809      	ldr	r0, [pc, #36]	@ (8000208 <main+0x48>)
 80001e4:	f001 fe1a 	bl	8001e1c <HAL_UART_Receive_IT>
	  /*HAL_GPIO_TogglePin(LED_PA5_GPIO_Port, LED_PA5_Pin);
	  ADC_value = HAL_ADC_GetValue(&hadc1);
	  HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "%lu\n", ADC_value), 1000);
	  HAL_Delay(500);*/

	  if(buffer_flag == 1){
 80001e8:	4b08      	ldr	r3, [pc, #32]	@ (800020c <main+0x4c>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d104      	bne.n	80001fa <main+0x3a>
		  command_parser_fsm();
 80001f0:	f7ff ffac 	bl	800014c <command_parser_fsm>
		  buffer_flag = 0;
 80001f4:	4b05      	ldr	r3, [pc, #20]	@ (800020c <main+0x4c>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	701a      	strb	r2, [r3, #0]
	  }
	  uart_communiation_fsm();
 80001fa:	f000 f9f5 	bl	80005e8 <uart_communiation_fsm>
	  if(buffer_flag == 1){
 80001fe:	e7f3      	b.n	80001e8 <main+0x28>
 8000200:	2000004c 	.word	0x2000004c
 8000204:	20000028 	.word	0x20000028
 8000208:	2000007c 	.word	0x2000007c
 800020c:	2000004b 	.word	0x2000004b

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b094      	sub	sp, #80	@ 0x50
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800021a:	2228      	movs	r2, #40	@ 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f002 fb34 	bl	800288c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	f107 0314 	add.w	r3, r7, #20
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000240:	2302      	movs	r3, #2
 8000242:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000248:	2310      	movs	r3, #16
 800024a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800024c:	2300      	movs	r3, #0
 800024e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000254:	4618      	mov	r0, r3
 8000256:	f001 f8cb 	bl	80013f0 <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000260:	f000 f8c0 	bl	80003e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000268:	2300      	movs	r3, #0
 800026a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000278:	f107 0314 	add.w	r3, r7, #20
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fb38 	bl	80018f4 <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800028a:	f000 f8ab 	bl	80003e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800028e:	2302      	movs	r3, #2
 8000290:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000292:	2300      	movs	r3, #0
 8000294:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f001 fcb9 	bl	8001c10 <HAL_RCCEx_PeriphCLKConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002a4:	f000 f89e 	bl	80003e4 <Error_Handler>
  }
}
 80002a8:	bf00      	nop
 80002aa:	3750      	adds	r7, #80	@ 0x50
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002c0:	4b18      	ldr	r3, [pc, #96]	@ (8000324 <MX_ADC1_Init+0x74>)
 80002c2:	4a19      	ldr	r2, [pc, #100]	@ (8000328 <MX_ADC1_Init+0x78>)
 80002c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002c6:	4b17      	ldr	r3, [pc, #92]	@ (8000324 <MX_ADC1_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002cc:	4b15      	ldr	r3, [pc, #84]	@ (8000324 <MX_ADC1_Init+0x74>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002d2:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <MX_ADC1_Init+0x74>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002d8:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <MX_ADC1_Init+0x74>)
 80002da:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002e0:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <MX_ADC1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000324 <MX_ADC1_Init+0x74>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002ec:	480d      	ldr	r0, [pc, #52]	@ (8000324 <MX_ADC1_Init+0x74>)
 80002ee:	f000 fa09 	bl	8000704 <HAL_ADC_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002f8:	f000 f874 	bl	80003e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000300:	2301      	movs	r3, #1
 8000302:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	4619      	mov	r1, r3
 800030c:	4805      	ldr	r0, [pc, #20]	@ (8000324 <MX_ADC1_Init+0x74>)
 800030e:	f000 fb7f 	bl	8000a10 <HAL_ADC_ConfigChannel>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000318:	f000 f864 	bl	80003e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800031c:	bf00      	nop
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000004c 	.word	0x2000004c
 8000328:	40012400 	.word	0x40012400

0800032c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000330:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 8000332:	4a12      	ldr	r2, [pc, #72]	@ (800037c <MX_USART2_UART_Init+0x50>)
 8000334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000336:	4b10      	ldr	r3, [pc, #64]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 8000338:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800033c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800033e:	4b0e      	ldr	r3, [pc, #56]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000344:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800034a:	4b0b      	ldr	r3, [pc, #44]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000350:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 8000352:	220c      	movs	r2, #12
 8000354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000356:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000362:	4805      	ldr	r0, [pc, #20]	@ (8000378 <MX_USART2_UART_Init+0x4c>)
 8000364:	f001 fd0a 	bl	8001d7c <HAL_UART_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800036e:	f000 f839 	bl	80003e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	2000007c 	.word	0x2000007c
 800037c:	40004400 	.word	0x40004400

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000394:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <MX_GPIO_Init+0x5c>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a10      	ldr	r2, [pc, #64]	@ (80003dc <MX_GPIO_Init+0x5c>)
 800039a:	f043 0304 	orr.w	r3, r3, #4
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b0e      	ldr	r3, [pc, #56]	@ (80003dc <MX_GPIO_Init+0x5c>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	607b      	str	r3, [r7, #4]
 80003aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PA5_GPIO_Port, LED_PA5_Pin, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2120      	movs	r1, #32
 80003b0:	480b      	ldr	r0, [pc, #44]	@ (80003e0 <MX_GPIO_Init+0x60>)
 80003b2:	f001 f805 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PA5_Pin */
  GPIO_InitStruct.Pin = LED_PA5_Pin;
 80003b6:	2320      	movs	r3, #32
 80003b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ba:	2301      	movs	r3, #1
 80003bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c2:	2302      	movs	r3, #2
 80003c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_PA5_GPIO_Port, &GPIO_InitStruct);
 80003c6:	f107 0308 	add.w	r3, r7, #8
 80003ca:	4619      	mov	r1, r3
 80003cc:	4804      	ldr	r0, [pc, #16]	@ (80003e0 <MX_GPIO_Init+0x60>)
 80003ce:	f000 fe73 	bl	80010b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003d2:	bf00      	nop
 80003d4:	3718      	adds	r7, #24
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010800 	.word	0x40010800

080003e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e8:	b672      	cpsid	i
}
 80003ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <Error_Handler+0x8>

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	4b15      	ldr	r3, [pc, #84]	@ (800044c <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a14      	ldr	r2, [pc, #80]	@ (800044c <HAL_MspInit+0x5c>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b12      	ldr	r3, [pc, #72]	@ (800044c <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a0e      	ldr	r2, [pc, #56]	@ (800044c <HAL_MspInit+0x5c>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000426:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <HAL_MspInit+0x60>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	4a04      	ldr	r2, [pc, #16]	@ (8000450 <HAL_MspInit+0x60>)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000
 8000450:	40010000 	.word	0x40010000

08000454 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b088      	sub	sp, #32
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a14      	ldr	r2, [pc, #80]	@ (80004c0 <HAL_ADC_MspInit+0x6c>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d121      	bne.n	80004b8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000474:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <HAL_ADC_MspInit+0x70>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a12      	ldr	r2, [pc, #72]	@ (80004c4 <HAL_ADC_MspInit+0x70>)
 800047a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b10      	ldr	r3, [pc, #64]	@ (80004c4 <HAL_ADC_MspInit+0x70>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b0d      	ldr	r3, [pc, #52]	@ (80004c4 <HAL_ADC_MspInit+0x70>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a0c      	ldr	r2, [pc, #48]	@ (80004c4 <HAL_ADC_MspInit+0x70>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b0a      	ldr	r3, [pc, #40]	@ (80004c4 <HAL_ADC_MspInit+0x70>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004a4:	2301      	movs	r3, #1
 80004a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a8:	2303      	movs	r3, #3
 80004aa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4619      	mov	r1, r3
 80004b2:	4805      	ldr	r0, [pc, #20]	@ (80004c8 <HAL_ADC_MspInit+0x74>)
 80004b4:	f000 fe00 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004b8:	bf00      	nop
 80004ba:	3720      	adds	r7, #32
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40012400 	.word	0x40012400
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40010800 	.word	0x40010800

080004cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000564 <HAL_UART_MspInit+0x98>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d137      	bne.n	800055c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000568 <HAL_UART_MspInit+0x9c>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000568 <HAL_UART_MspInit+0x9c>)
 80004f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f6:	61d3      	str	r3, [r2, #28]
 80004f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000568 <HAL_UART_MspInit+0x9c>)
 80004fa:	69db      	ldr	r3, [r3, #28]
 80004fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b18      	ldr	r3, [pc, #96]	@ (8000568 <HAL_UART_MspInit+0x9c>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a17      	ldr	r2, [pc, #92]	@ (8000568 <HAL_UART_MspInit+0x9c>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <HAL_UART_MspInit+0x9c>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800051c:	2304      	movs	r3, #4
 800051e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	2302      	movs	r3, #2
 8000522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000524:	2303      	movs	r3, #3
 8000526:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	480f      	ldr	r0, [pc, #60]	@ (800056c <HAL_UART_MspInit+0xa0>)
 8000530:	f000 fdc2 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000534:	2308      	movs	r3, #8
 8000536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000540:	f107 0310 	add.w	r3, r7, #16
 8000544:	4619      	mov	r1, r3
 8000546:	4809      	ldr	r0, [pc, #36]	@ (800056c <HAL_UART_MspInit+0xa0>)
 8000548:	f000 fdb6 	bl	80010b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	2026      	movs	r0, #38	@ 0x26
 8000552:	f000 fcc8 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000556:	2026      	movs	r0, #38	@ 0x26
 8000558:	f000 fce1 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40004400 	.word	0x40004400
 8000568:	40021000 	.word	0x40021000
 800056c:	40010800 	.word	0x40010800

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <NMI_Handler+0x4>

08000578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <HardFault_Handler+0x4>

08000580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <MemManage_Handler+0x4>

08000588 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <BusFault_Handler+0x4>

08000590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <UsageFault_Handler+0x4>

08000598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c0:	f000 f884 	bl	80006cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005cc:	4802      	ldr	r0, [pc, #8]	@ (80005d8 <USART2_IRQHandler+0x10>)
 80005ce:	f001 fc4b 	bl	8001e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	2000007c 	.word	0x2000007c

080005dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <uart_communiation_fsm>:
 *      Author: ADMINS
 */

#include "uart_communiation.h"

void uart_communiation_fsm(void){
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	return;
 80005ec:	bf00      	nop
}
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005f4:	f7ff fff2 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005fa:	490c      	ldr	r1, [pc, #48]	@ (800062c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000630 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a09      	ldr	r2, [pc, #36]	@ (8000634 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000610:	4c09      	ldr	r4, [pc, #36]	@ (8000638 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800061e:	f002 f93d 	bl	800289c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000622:	f7ff fdcd 	bl	80001c0 <main>
  bx lr
 8000626:	4770      	bx	lr
  ldr r0, =_sdata
 8000628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800062c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000630:	08002930 	.word	0x08002930
  ldr r2, =_sbss
 8000634:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000638:	200000c8 	.word	0x200000c8

0800063c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800063c:	e7fe      	b.n	800063c <ADC1_2_IRQHandler>
	...

08000640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000644:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <HAL_Init+0x28>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a07      	ldr	r2, [pc, #28]	@ (8000668 <HAL_Init+0x28>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000650:	2003      	movs	r0, #3
 8000652:	f000 fc3d 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000656:	200f      	movs	r0, #15
 8000658:	f000 f808 	bl	800066c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800065c:	f7ff fec8 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40022000 	.word	0x40022000

0800066c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <HAL_InitTick+0x54>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <HAL_InitTick+0x58>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000682:	fbb3 f3f1 	udiv	r3, r3, r1
 8000686:	fbb2 f3f3 	udiv	r3, r2, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fc55 	bl	8000f3a <HAL_SYSTICK_Config>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	e00e      	b.n	80006b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b0f      	cmp	r3, #15
 800069e:	d80a      	bhi.n	80006b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a0:	2200      	movs	r2, #0
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	f04f 30ff 	mov.w	r0, #4294967295
 80006a8:	f000 fc1d 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ac:	4a06      	ldr	r2, [pc, #24]	@ (80006c8 <HAL_InitTick+0x5c>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006b2:	2300      	movs	r3, #0
 80006b4:	e000      	b.n	80006b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000008 	.word	0x20000008
 80006c8:	20000004 	.word	0x20000004

080006cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006d0:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <HAL_IncTick+0x1c>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <HAL_IncTick+0x20>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4413      	add	r3, r2
 80006dc:	4a03      	ldr	r2, [pc, #12]	@ (80006ec <HAL_IncTick+0x20>)
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	20000008 	.word	0x20000008
 80006ec:	200000c4 	.word	0x200000c4

080006f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return uwTick;
 80006f4:	4b02      	ldr	r3, [pc, #8]	@ (8000700 <HAL_GetTick+0x10>)
 80006f6:	681b      	ldr	r3, [r3, #0]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	200000c4 	.word	0x200000c4

08000704 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800070c:	2300      	movs	r3, #0
 800070e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d101      	bne.n	8000726 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	e0be      	b.n	80008a4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000730:	2b00      	cmp	r3, #0
 8000732:	d109      	bne.n	8000748 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff fe86 	bl	8000454 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 fab3 	bl	8000cb4 <ADC_ConversionStop_Disable>
 800074e:	4603      	mov	r3, r0
 8000750:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	2b00      	cmp	r3, #0
 800075c:	f040 8099 	bne.w	8000892 <HAL_ADC_Init+0x18e>
 8000760:	7dfb      	ldrb	r3, [r7, #23]
 8000762:	2b00      	cmp	r3, #0
 8000764:	f040 8095 	bne.w	8000892 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800076c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000770:	f023 0302 	bic.w	r3, r3, #2
 8000774:	f043 0202 	orr.w	r2, r3, #2
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000784:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	7b1b      	ldrb	r3, [r3, #12]
 800078a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800078c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	4313      	orrs	r3, r2
 8000792:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800079c:	d003      	beq.n	80007a6 <HAL_ADC_Init+0xa2>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d102      	bne.n	80007ac <HAL_ADC_Init+0xa8>
 80007a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007aa:	e000      	b.n	80007ae <HAL_ADC_Init+0xaa>
 80007ac:	2300      	movs	r3, #0
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7d1b      	ldrb	r3, [r3, #20]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d119      	bne.n	80007f0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	7b1b      	ldrb	r3, [r3, #12]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d109      	bne.n	80007d8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	035a      	lsls	r2, r3, #13
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	4313      	orrs	r3, r2
 80007d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	e00b      	b.n	80007f0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007dc:	f043 0220 	orr.w	r2, r3, #32
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e8:	f043 0201 	orr.w	r2, r3, #1
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	430a      	orrs	r2, r1
 8000802:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	689a      	ldr	r2, [r3, #8]
 800080a:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <HAL_ADC_Init+0x1a8>)
 800080c:	4013      	ands	r3, r2
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	6812      	ldr	r2, [r2, #0]
 8000812:	68b9      	ldr	r1, [r7, #8]
 8000814:	430b      	orrs	r3, r1
 8000816:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000820:	d003      	beq.n	800082a <HAL_ADC_Init+0x126>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d104      	bne.n	8000834 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	3b01      	subs	r3, #1
 8000830:	051b      	lsls	r3, r3, #20
 8000832:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800083a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	430a      	orrs	r2, r1
 8000846:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <HAL_ADC_Init+0x1ac>)
 8000850:	4013      	ands	r3, r2
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	429a      	cmp	r2, r3
 8000856:	d10b      	bne.n	8000870 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000862:	f023 0303 	bic.w	r3, r3, #3
 8000866:	f043 0201 	orr.w	r2, r3, #1
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800086e:	e018      	b.n	80008a2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000874:	f023 0312 	bic.w	r3, r3, #18
 8000878:	f043 0210 	orr.w	r2, r3, #16
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000884:	f043 0201 	orr.w	r2, r3, #1
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000890:	e007      	b.n	80008a2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000896:	f043 0210 	orr.w	r2, r3, #16
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	ffe1f7fd 	.word	0xffe1f7fd
 80008b0:	ff1f0efe 	.word	0xff1f0efe

080008b4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008bc:	2300      	movs	r3, #0
 80008be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d101      	bne.n	80008ce <HAL_ADC_Start+0x1a>
 80008ca:	2302      	movs	r3, #2
 80008cc:	e098      	b.n	8000a00 <HAL_ADC_Start+0x14c>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2201      	movs	r2, #1
 80008d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f000 f992 	bl	8000c00 <ADC_Enable>
 80008dc:	4603      	mov	r3, r0
 80008de:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 8087 	bne.w	80009f6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80008f0:	f023 0301 	bic.w	r3, r3, #1
 80008f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a41      	ldr	r2, [pc, #260]	@ (8000a08 <HAL_ADC_Start+0x154>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d105      	bne.n	8000912 <HAL_ADC_Start+0x5e>
 8000906:	4b41      	ldr	r3, [pc, #260]	@ (8000a0c <HAL_ADC_Start+0x158>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800090e:	2b00      	cmp	r3, #0
 8000910:	d115      	bne.n	800093e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000916:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000928:	2b00      	cmp	r3, #0
 800092a:	d026      	beq.n	800097a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000930:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000934:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800093c:	e01d      	b.n	800097a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000942:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a0c <HAL_ADC_Start+0x158>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d004      	beq.n	800095e <HAL_ADC_Start+0xaa>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a2b      	ldr	r2, [pc, #172]	@ (8000a08 <HAL_ADC_Start+0x154>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d10d      	bne.n	800097a <HAL_ADC_Start+0xc6>
 800095e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a0c <HAL_ADC_Start+0x158>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000966:	2b00      	cmp	r3, #0
 8000968:	d007      	beq.n	800097a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800096e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000972:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800097e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d006      	beq.n	8000994 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800098a:	f023 0206 	bic.w	r2, r3, #6
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000992:	e002      	b.n	800099a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f06f 0202 	mvn.w	r2, #2
 80009aa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80009b6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80009ba:	d113      	bne.n	80009e4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009c0:	4a11      	ldr	r2, [pc, #68]	@ (8000a08 <HAL_ADC_Start+0x154>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d105      	bne.n	80009d2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_ADC_Start+0x158>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d108      	bne.n	80009e4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	e00c      	b.n	80009fe <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	e003      	b.n	80009fe <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40012800 	.word	0x40012800
 8000a0c:	40012400 	.word	0x40012400

08000a10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d101      	bne.n	8000a30 <HAL_ADC_ConfigChannel+0x20>
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	e0dc      	b.n	8000bea <HAL_ADC_ConfigChannel+0x1da>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2201      	movs	r2, #1
 8000a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	2b06      	cmp	r3, #6
 8000a3e:	d81c      	bhi.n	8000a7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4413      	add	r3, r2
 8000a50:	3b05      	subs	r3, #5
 8000a52:	221f      	movs	r2, #31
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	4019      	ands	r1, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685a      	ldr	r2, [r3, #4]
 8000a64:	4613      	mov	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	3b05      	subs	r3, #5
 8000a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a78:	e03c      	b.n	8000af4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	2b0c      	cmp	r3, #12
 8000a80:	d81c      	bhi.n	8000abc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685a      	ldr	r2, [r3, #4]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	3b23      	subs	r3, #35	@ 0x23
 8000a94:	221f      	movs	r2, #31
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	4019      	ands	r1, r3
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	6818      	ldr	r0, [r3, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	3b23      	subs	r3, #35	@ 0x23
 8000aae:	fa00 f203 	lsl.w	r2, r0, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000aba:	e01b      	b.n	8000af4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685a      	ldr	r2, [r3, #4]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	4413      	add	r3, r2
 8000acc:	3b41      	subs	r3, #65	@ 0x41
 8000ace:	221f      	movs	r2, #31
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	4019      	ands	r1, r3
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	3b41      	subs	r3, #65	@ 0x41
 8000ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	430a      	orrs	r2, r1
 8000af2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b09      	cmp	r3, #9
 8000afa:	d91c      	bls.n	8000b36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	68d9      	ldr	r1, [r3, #12]
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4613      	mov	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	4413      	add	r3, r2
 8000b0c:	3b1e      	subs	r3, #30
 8000b0e:	2207      	movs	r2, #7
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	4019      	ands	r1, r3
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	6898      	ldr	r0, [r3, #8]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4613      	mov	r3, r2
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	4413      	add	r3, r2
 8000b26:	3b1e      	subs	r3, #30
 8000b28:	fa00 f203 	lsl.w	r2, r0, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	430a      	orrs	r2, r1
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	e019      	b.n	8000b6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6919      	ldr	r1, [r3, #16]
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	2207      	movs	r2, #7
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	4019      	ands	r1, r3
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	6898      	ldr	r0, [r3, #8]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	430a      	orrs	r2, r1
 8000b68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b10      	cmp	r3, #16
 8000b70:	d003      	beq.n	8000b7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b76:	2b11      	cmp	r3, #17
 8000b78:	d132      	bne.n	8000be0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d125      	bne.n	8000bd0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d126      	bne.n	8000be0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000ba0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b10      	cmp	r3, #16
 8000ba8:	d11a      	bne.n	8000be0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000baa:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a13      	ldr	r2, [pc, #76]	@ (8000bfc <HAL_ADC_ConfigChannel+0x1ec>)
 8000bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb4:	0c9a      	lsrs	r2, r3, #18
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bc0:	e002      	b.n	8000bc8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1f9      	bne.n	8000bc2 <HAL_ADC_ConfigChannel+0x1b2>
 8000bce:	e007      	b.n	8000be0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bd4:	f043 0220 	orr.w	r2, r3, #32
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	40012400 	.word	0x40012400
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	431bde83 	.word	0x431bde83

08000c00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d040      	beq.n	8000ca0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f042 0201 	orr.w	r2, r2, #1
 8000c2c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <ADC_Enable+0xac>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb0 <ADC_Enable+0xb0>)
 8000c34:	fba2 2303 	umull	r2, r3, r2, r3
 8000c38:	0c9b      	lsrs	r3, r3, #18
 8000c3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000c3c:	e002      	b.n	8000c44 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f9      	bne.n	8000c3e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c4a:	f7ff fd51 	bl	80006f0 <HAL_GetTick>
 8000c4e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000c50:	e01f      	b.n	8000c92 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c52:	f7ff fd4d 	bl	80006f0 <HAL_GetTick>
 8000c56:	4602      	mov	r2, r0
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d918      	bls.n	8000c92 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d011      	beq.n	8000c92 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c72:	f043 0210 	orr.w	r2, r3, #16
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c7e:	f043 0201 	orr.w	r2, r3, #1
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e007      	b.n	8000ca2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d1d8      	bne.n	8000c52 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	431bde83 	.word	0x431bde83

08000cb4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d12e      	bne.n	8000d2c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f022 0201 	bic.w	r2, r2, #1
 8000cdc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000cde:	f7ff fd07 	bl	80006f0 <HAL_GetTick>
 8000ce2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ce4:	e01b      	b.n	8000d1e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ce6:	f7ff fd03 	bl	80006f0 <HAL_GetTick>
 8000cea:	4602      	mov	r2, r0
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d914      	bls.n	8000d1e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d10d      	bne.n	8000d1e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d06:	f043 0210 	orr.w	r2, r3, #16
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d12:	f043 0201 	orr.w	r2, r3, #1
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e007      	b.n	8000d2e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d0dc      	beq.n	8000ce6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4906      	ldr	r1, [pc, #24]	@ (8000dd0 <__NVIC_EnableIRQ+0x34>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	@ (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	@ (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	@ 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	@ 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff90 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff2d 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff42 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff90 	bl	8000e28 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5f 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff35 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa2 	bl	8000e8c <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b085      	sub	sp, #20
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d008      	beq.n	8000f7c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2204      	movs	r2, #4
 8000f6e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e020      	b.n	8000fbe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 020e 	bic.w	r2, r2, #14
 8000f8a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0201 	bic.w	r2, r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8000faa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d005      	beq.n	8000fec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e051      	b.n	8001090 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 020e 	bic.w	r2, r2, #14
 8000ffa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0201 	bic.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a22      	ldr	r2, [pc, #136]	@ (800109c <HAL_DMA_Abort_IT+0xd4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d029      	beq.n	800106a <HAL_DMA_Abort_IT+0xa2>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a21      	ldr	r2, [pc, #132]	@ (80010a0 <HAL_DMA_Abort_IT+0xd8>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d022      	beq.n	8001066 <HAL_DMA_Abort_IT+0x9e>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a1f      	ldr	r2, [pc, #124]	@ (80010a4 <HAL_DMA_Abort_IT+0xdc>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d01a      	beq.n	8001060 <HAL_DMA_Abort_IT+0x98>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a1e      	ldr	r2, [pc, #120]	@ (80010a8 <HAL_DMA_Abort_IT+0xe0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d012      	beq.n	800105a <HAL_DMA_Abort_IT+0x92>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a1c      	ldr	r2, [pc, #112]	@ (80010ac <HAL_DMA_Abort_IT+0xe4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d00a      	beq.n	8001054 <HAL_DMA_Abort_IT+0x8c>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a1b      	ldr	r2, [pc, #108]	@ (80010b0 <HAL_DMA_Abort_IT+0xe8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d102      	bne.n	800104e <HAL_DMA_Abort_IT+0x86>
 8001048:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800104c:	e00e      	b.n	800106c <HAL_DMA_Abort_IT+0xa4>
 800104e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001052:	e00b      	b.n	800106c <HAL_DMA_Abort_IT+0xa4>
 8001054:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001058:	e008      	b.n	800106c <HAL_DMA_Abort_IT+0xa4>
 800105a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800105e:	e005      	b.n	800106c <HAL_DMA_Abort_IT+0xa4>
 8001060:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001064:	e002      	b.n	800106c <HAL_DMA_Abort_IT+0xa4>
 8001066:	2310      	movs	r3, #16
 8001068:	e000      	b.n	800106c <HAL_DMA_Abort_IT+0xa4>
 800106a:	2301      	movs	r3, #1
 800106c:	4a11      	ldr	r2, [pc, #68]	@ (80010b4 <HAL_DMA_Abort_IT+0xec>)
 800106e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	4798      	blx	r3
    } 
  }
  return status;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40020008 	.word	0x40020008
 80010a0:	4002001c 	.word	0x4002001c
 80010a4:	40020030 	.word	0x40020030
 80010a8:	40020044 	.word	0x40020044
 80010ac:	40020058 	.word	0x40020058
 80010b0:	4002006c 	.word	0x4002006c
 80010b4:	40020000 	.word	0x40020000

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b08b      	sub	sp, #44	@ 0x2c
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ca:	e169      	b.n	80013a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010cc:	2201      	movs	r2, #1
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	f040 8158 	bne.w	800139a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4a9a      	ldr	r2, [pc, #616]	@ (8001358 <HAL_GPIO_Init+0x2a0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d05e      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
 80010f4:	4a98      	ldr	r2, [pc, #608]	@ (8001358 <HAL_GPIO_Init+0x2a0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d875      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 80010fa:	4a98      	ldr	r2, [pc, #608]	@ (800135c <HAL_GPIO_Init+0x2a4>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d058      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
 8001100:	4a96      	ldr	r2, [pc, #600]	@ (800135c <HAL_GPIO_Init+0x2a4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d86f      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 8001106:	4a96      	ldr	r2, [pc, #600]	@ (8001360 <HAL_GPIO_Init+0x2a8>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d052      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
 800110c:	4a94      	ldr	r2, [pc, #592]	@ (8001360 <HAL_GPIO_Init+0x2a8>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d869      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 8001112:	4a94      	ldr	r2, [pc, #592]	@ (8001364 <HAL_GPIO_Init+0x2ac>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d04c      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
 8001118:	4a92      	ldr	r2, [pc, #584]	@ (8001364 <HAL_GPIO_Init+0x2ac>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d863      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 800111e:	4a92      	ldr	r2, [pc, #584]	@ (8001368 <HAL_GPIO_Init+0x2b0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d046      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
 8001124:	4a90      	ldr	r2, [pc, #576]	@ (8001368 <HAL_GPIO_Init+0x2b0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d85d      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 800112a:	2b12      	cmp	r3, #18
 800112c:	d82a      	bhi.n	8001184 <HAL_GPIO_Init+0xcc>
 800112e:	2b12      	cmp	r3, #18
 8001130:	d859      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 8001132:	a201      	add	r2, pc, #4	@ (adr r2, 8001138 <HAL_GPIO_Init+0x80>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	080011b3 	.word	0x080011b3
 800113c:	0800118d 	.word	0x0800118d
 8001140:	0800119f 	.word	0x0800119f
 8001144:	080011e1 	.word	0x080011e1
 8001148:	080011e7 	.word	0x080011e7
 800114c:	080011e7 	.word	0x080011e7
 8001150:	080011e7 	.word	0x080011e7
 8001154:	080011e7 	.word	0x080011e7
 8001158:	080011e7 	.word	0x080011e7
 800115c:	080011e7 	.word	0x080011e7
 8001160:	080011e7 	.word	0x080011e7
 8001164:	080011e7 	.word	0x080011e7
 8001168:	080011e7 	.word	0x080011e7
 800116c:	080011e7 	.word	0x080011e7
 8001170:	080011e7 	.word	0x080011e7
 8001174:	080011e7 	.word	0x080011e7
 8001178:	080011e7 	.word	0x080011e7
 800117c:	08001195 	.word	0x08001195
 8001180:	080011a9 	.word	0x080011a9
 8001184:	4a79      	ldr	r2, [pc, #484]	@ (800136c <HAL_GPIO_Init+0x2b4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800118a:	e02c      	b.n	80011e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	623b      	str	r3, [r7, #32]
          break;
 8001192:	e029      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	3304      	adds	r3, #4
 800119a:	623b      	str	r3, [r7, #32]
          break;
 800119c:	e024      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	3308      	adds	r3, #8
 80011a4:	623b      	str	r3, [r7, #32]
          break;
 80011a6:	e01f      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	330c      	adds	r3, #12
 80011ae:	623b      	str	r3, [r7, #32]
          break;
 80011b0:	e01a      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011ba:	2304      	movs	r3, #4
 80011bc:	623b      	str	r3, [r7, #32]
          break;
 80011be:	e013      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d105      	bne.n	80011d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c8:	2308      	movs	r3, #8
 80011ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	611a      	str	r2, [r3, #16]
          break;
 80011d2:	e009      	b.n	80011e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011d4:	2308      	movs	r3, #8
 80011d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	615a      	str	r2, [r3, #20]
          break;
 80011de:	e003      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
          break;
 80011e4:	e000      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          break;
 80011e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2bff      	cmp	r3, #255	@ 0xff
 80011ec:	d801      	bhi.n	80011f2 <HAL_GPIO_Init+0x13a>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	e001      	b.n	80011f6 <HAL_GPIO_Init+0x13e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3304      	adds	r3, #4
 80011f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2bff      	cmp	r3, #255	@ 0xff
 80011fc:	d802      	bhi.n	8001204 <HAL_GPIO_Init+0x14c>
 80011fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	e002      	b.n	800120a <HAL_GPIO_Init+0x152>
 8001204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001206:	3b08      	subs	r3, #8
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	210f      	movs	r1, #15
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	fa01 f303 	lsl.w	r3, r1, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	401a      	ands	r2, r3
 800121c:	6a39      	ldr	r1, [r7, #32]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	431a      	orrs	r2, r3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 80b1 	beq.w	800139a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001238:	4b4d      	ldr	r3, [pc, #308]	@ (8001370 <HAL_GPIO_Init+0x2b8>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a4c      	ldr	r2, [pc, #304]	@ (8001370 <HAL_GPIO_Init+0x2b8>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b4a      	ldr	r3, [pc, #296]	@ (8001370 <HAL_GPIO_Init+0x2b8>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001250:	4a48      	ldr	r2, [pc, #288]	@ (8001374 <HAL_GPIO_Init+0x2bc>)
 8001252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800125e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4013      	ands	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a40      	ldr	r2, [pc, #256]	@ (8001378 <HAL_GPIO_Init+0x2c0>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d013      	beq.n	80012a4 <HAL_GPIO_Init+0x1ec>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a3f      	ldr	r2, [pc, #252]	@ (800137c <HAL_GPIO_Init+0x2c4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d00d      	beq.n	80012a0 <HAL_GPIO_Init+0x1e8>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a3e      	ldr	r2, [pc, #248]	@ (8001380 <HAL_GPIO_Init+0x2c8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d007      	beq.n	800129c <HAL_GPIO_Init+0x1e4>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a3d      	ldr	r2, [pc, #244]	@ (8001384 <HAL_GPIO_Init+0x2cc>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d101      	bne.n	8001298 <HAL_GPIO_Init+0x1e0>
 8001294:	2303      	movs	r3, #3
 8001296:	e006      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 8001298:	2304      	movs	r3, #4
 800129a:	e004      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 800129c:	2302      	movs	r3, #2
 800129e:	e002      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 80012a4:	2300      	movs	r3, #0
 80012a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a8:	f002 0203 	and.w	r2, r2, #3
 80012ac:	0092      	lsls	r2, r2, #2
 80012ae:	4093      	lsls	r3, r2
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012b6:	492f      	ldr	r1, [pc, #188]	@ (8001374 <HAL_GPIO_Init+0x2bc>)
 80012b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001388 <HAL_GPIO_Init+0x2d0>)
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	492c      	ldr	r1, [pc, #176]	@ (8001388 <HAL_GPIO_Init+0x2d0>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	608b      	str	r3, [r1, #8]
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012de:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <HAL_GPIO_Init+0x2d0>)
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	4928      	ldr	r1, [pc, #160]	@ (8001388 <HAL_GPIO_Init+0x2d0>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012f8:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <HAL_GPIO_Init+0x2d0>)
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	4922      	ldr	r1, [pc, #136]	@ (8001388 <HAL_GPIO_Init+0x2d0>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	60cb      	str	r3, [r1, #12]
 8001304:	e006      	b.n	8001314 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <HAL_GPIO_Init+0x2d0>)
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	43db      	mvns	r3, r3
 800130e:	491e      	ldr	r1, [pc, #120]	@ (8001388 <HAL_GPIO_Init+0x2d0>)
 8001310:	4013      	ands	r3, r2
 8001312:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d006      	beq.n	800132e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <HAL_GPIO_Init+0x2d0>)
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	4918      	ldr	r1, [pc, #96]	@ (8001388 <HAL_GPIO_Init+0x2d0>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	604b      	str	r3, [r1, #4]
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800132e:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <HAL_GPIO_Init+0x2d0>)
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	43db      	mvns	r3, r3
 8001336:	4914      	ldr	r1, [pc, #80]	@ (8001388 <HAL_GPIO_Init+0x2d0>)
 8001338:	4013      	ands	r3, r2
 800133a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d021      	beq.n	800138c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <HAL_GPIO_Init+0x2d0>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	490e      	ldr	r1, [pc, #56]	@ (8001388 <HAL_GPIO_Init+0x2d0>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	600b      	str	r3, [r1, #0]
 8001354:	e021      	b.n	800139a <HAL_GPIO_Init+0x2e2>
 8001356:	bf00      	nop
 8001358:	10320000 	.word	0x10320000
 800135c:	10310000 	.word	0x10310000
 8001360:	10220000 	.word	0x10220000
 8001364:	10210000 	.word	0x10210000
 8001368:	10120000 	.word	0x10120000
 800136c:	10110000 	.word	0x10110000
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000
 8001378:	40010800 	.word	0x40010800
 800137c:	40010c00 	.word	0x40010c00
 8001380:	40011000 	.word	0x40011000
 8001384:	40011400 	.word	0x40011400
 8001388:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800138c:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <HAL_GPIO_Init+0x304>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	43db      	mvns	r3, r3
 8001394:	4909      	ldr	r1, [pc, #36]	@ (80013bc <HAL_GPIO_Init+0x304>)
 8001396:	4013      	ands	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	3301      	adds	r3, #1
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a6:	fa22 f303 	lsr.w	r3, r2, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f47f ae8e 	bne.w	80010cc <HAL_GPIO_Init+0x14>
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	372c      	adds	r7, #44	@ 0x2c
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	40010400 	.word	0x40010400

080013c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
 80013cc:	4613      	mov	r3, r2
 80013ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013dc:	e003      	b.n	80013e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	611a      	str	r2, [r3, #16]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e272      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 8087 	beq.w	800151e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001410:	4b92      	ldr	r3, [pc, #584]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b04      	cmp	r3, #4
 800141a:	d00c      	beq.n	8001436 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800141c:	4b8f      	ldr	r3, [pc, #572]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b08      	cmp	r3, #8
 8001426:	d112      	bne.n	800144e <HAL_RCC_OscConfig+0x5e>
 8001428:	4b8c      	ldr	r3, [pc, #560]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001434:	d10b      	bne.n	800144e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001436:	4b89      	ldr	r3, [pc, #548]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d06c      	beq.n	800151c <HAL_RCC_OscConfig+0x12c>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d168      	bne.n	800151c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e24c      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001456:	d106      	bne.n	8001466 <HAL_RCC_OscConfig+0x76>
 8001458:	4b80      	ldr	r3, [pc, #512]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a7f      	ldr	r2, [pc, #508]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 800145e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	e02e      	b.n	80014c4 <HAL_RCC_OscConfig+0xd4>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10c      	bne.n	8001488 <HAL_RCC_OscConfig+0x98>
 800146e:	4b7b      	ldr	r3, [pc, #492]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a7a      	ldr	r2, [pc, #488]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 8001474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b78      	ldr	r3, [pc, #480]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a77      	ldr	r2, [pc, #476]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 8001480:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e01d      	b.n	80014c4 <HAL_RCC_OscConfig+0xd4>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0xbc>
 8001492:	4b72      	ldr	r3, [pc, #456]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a71      	ldr	r2, [pc, #452]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 8001498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b6f      	ldr	r3, [pc, #444]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6e      	ldr	r2, [pc, #440]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0xd4>
 80014ac:	4b6b      	ldr	r3, [pc, #428]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a6a      	ldr	r2, [pc, #424]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 80014b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b68      	ldr	r3, [pc, #416]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a67      	ldr	r2, [pc, #412]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 80014be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d013      	beq.n	80014f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff f910 	bl	80006f0 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff f90c 	bl	80006f0 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	@ 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e200      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	4b5d      	ldr	r3, [pc, #372]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0xe4>
 80014f2:	e014      	b.n	800151e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff f8fc 	bl	80006f0 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff f8f8 	bl	80006f0 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	@ 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e1ec      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	4b53      	ldr	r3, [pc, #332]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x10c>
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d063      	beq.n	80015f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800152a:	4b4c      	ldr	r3, [pc, #304]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00b      	beq.n	800154e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001536:	4b49      	ldr	r3, [pc, #292]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b08      	cmp	r3, #8
 8001540:	d11c      	bne.n	800157c <HAL_RCC_OscConfig+0x18c>
 8001542:	4b46      	ldr	r3, [pc, #280]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d116      	bne.n	800157c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154e:	4b43      	ldr	r3, [pc, #268]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_RCC_OscConfig+0x176>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d001      	beq.n	8001566 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e1c0      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001566:	4b3d      	ldr	r3, [pc, #244]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4939      	ldr	r1, [pc, #228]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	e03a      	b.n	80015f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d020      	beq.n	80015c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001584:	4b36      	ldr	r3, [pc, #216]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff f8b1 	bl	80006f0 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff f8ad 	bl	80006f0 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e1a1      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	4b2d      	ldr	r3, [pc, #180]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4927      	ldr	r1, [pc, #156]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]
 80015c4:	e015      	b.n	80015f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c6:	4b26      	ldr	r3, [pc, #152]	@ (8001660 <HAL_RCC_OscConfig+0x270>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff f890 	bl	80006f0 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff f88c 	bl	80006f0 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e180      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	4b1d      	ldr	r3, [pc, #116]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d03a      	beq.n	8001674 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d019      	beq.n	800163a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001606:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <HAL_RCC_OscConfig+0x274>)
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160c:	f7ff f870 	bl	80006f0 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff f86c 	bl	80006f0 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e160      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001626:	4b0d      	ldr	r3, [pc, #52]	@ (800165c <HAL_RCC_OscConfig+0x26c>)
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001632:	2001      	movs	r0, #1
 8001634:	f000 face 	bl	8001bd4 <RCC_Delay>
 8001638:	e01c      	b.n	8001674 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <HAL_RCC_OscConfig+0x274>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001640:	f7ff f856 	bl	80006f0 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001646:	e00f      	b.n	8001668 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001648:	f7ff f852 	bl	80006f0 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d908      	bls.n	8001668 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e146      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	42420000 	.word	0x42420000
 8001664:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001668:	4b92      	ldr	r3, [pc, #584]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1e9      	bne.n	8001648 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80a6 	beq.w	80017ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001686:	4b8b      	ldr	r3, [pc, #556]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10d      	bne.n	80016ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	4b88      	ldr	r3, [pc, #544]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4a87      	ldr	r2, [pc, #540]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169c:	61d3      	str	r3, [r2, #28]
 800169e:	4b85      	ldr	r3, [pc, #532]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016aa:	2301      	movs	r3, #1
 80016ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ae:	4b82      	ldr	r3, [pc, #520]	@ (80018b8 <HAL_RCC_OscConfig+0x4c8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d118      	bne.n	80016ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ba:	4b7f      	ldr	r3, [pc, #508]	@ (80018b8 <HAL_RCC_OscConfig+0x4c8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a7e      	ldr	r2, [pc, #504]	@ (80018b8 <HAL_RCC_OscConfig+0x4c8>)
 80016c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c6:	f7ff f813 	bl	80006f0 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ce:	f7ff f80f 	bl	80006f0 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b64      	cmp	r3, #100	@ 0x64
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e103      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	4b75      	ldr	r3, [pc, #468]	@ (80018b8 <HAL_RCC_OscConfig+0x4c8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d106      	bne.n	8001702 <HAL_RCC_OscConfig+0x312>
 80016f4:	4b6f      	ldr	r3, [pc, #444]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4a6e      	ldr	r2, [pc, #440]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6213      	str	r3, [r2, #32]
 8001700:	e02d      	b.n	800175e <HAL_RCC_OscConfig+0x36e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x334>
 800170a:	4b6a      	ldr	r3, [pc, #424]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4a69      	ldr	r2, [pc, #420]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	6213      	str	r3, [r2, #32]
 8001716:	4b67      	ldr	r3, [pc, #412]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a66      	ldr	r2, [pc, #408]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	f023 0304 	bic.w	r3, r3, #4
 8001720:	6213      	str	r3, [r2, #32]
 8001722:	e01c      	b.n	800175e <HAL_RCC_OscConfig+0x36e>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b05      	cmp	r3, #5
 800172a:	d10c      	bne.n	8001746 <HAL_RCC_OscConfig+0x356>
 800172c:	4b61      	ldr	r3, [pc, #388]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a60      	ldr	r2, [pc, #384]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6213      	str	r3, [r2, #32]
 8001738:	4b5e      	ldr	r3, [pc, #376]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a5d      	ldr	r2, [pc, #372]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	e00b      	b.n	800175e <HAL_RCC_OscConfig+0x36e>
 8001746:	4b5b      	ldr	r3, [pc, #364]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	4a5a      	ldr	r2, [pc, #360]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	6213      	str	r3, [r2, #32]
 8001752:	4b58      	ldr	r3, [pc, #352]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a57      	ldr	r2, [pc, #348]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	f023 0304 	bic.w	r3, r3, #4
 800175c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d015      	beq.n	8001792 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001766:	f7fe ffc3 	bl	80006f0 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176e:	f7fe ffbf 	bl	80006f0 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e0b1      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001784:	4b4b      	ldr	r3, [pc, #300]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0ee      	beq.n	800176e <HAL_RCC_OscConfig+0x37e>
 8001790:	e014      	b.n	80017bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001792:	f7fe ffad 	bl	80006f0 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179a:	f7fe ffa9 	bl	80006f0 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e09b      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b0:	4b40      	ldr	r3, [pc, #256]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1ee      	bne.n	800179a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017bc:	7dfb      	ldrb	r3, [r7, #23]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d105      	bne.n	80017ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c2:	4b3c      	ldr	r3, [pc, #240]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a3b      	ldr	r2, [pc, #236]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 8087 	beq.w	80018e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d8:	4b36      	ldr	r3, [pc, #216]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d061      	beq.n	80018a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d146      	bne.n	800187a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ec:	4b33      	ldr	r3, [pc, #204]	@ (80018bc <HAL_RCC_OscConfig+0x4cc>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f2:	f7fe ff7d 	bl	80006f0 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fa:	f7fe ff79 	bl	80006f0 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e06d      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180c:	4b29      	ldr	r3, [pc, #164]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f0      	bne.n	80017fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001820:	d108      	bne.n	8001834 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001822:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	4921      	ldr	r1, [pc, #132]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001834:	4b1f      	ldr	r3, [pc, #124]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a19      	ldr	r1, [r3, #32]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001844:	430b      	orrs	r3, r1
 8001846:	491b      	ldr	r1, [pc, #108]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800184c:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <HAL_RCC_OscConfig+0x4cc>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7fe ff4d 	bl	80006f0 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185a:	f7fe ff49 	bl	80006f0 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e03d      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x46a>
 8001878:	e035      	b.n	80018e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <HAL_RCC_OscConfig+0x4cc>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7fe ff36 	bl	80006f0 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001888:	f7fe ff32 	bl	80006f0 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e026      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x498>
 80018a6:	e01e      	b.n	80018e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d107      	bne.n	80018c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e019      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40007000 	.word	0x40007000
 80018bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c0:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <HAL_RCC_OscConfig+0x500>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0d0      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b6a      	ldr	r3, [pc, #424]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d910      	bls.n	8001938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b67      	ldr	r3, [pc, #412]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 0207 	bic.w	r2, r3, #7
 800191e:	4965      	ldr	r1, [pc, #404]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b63      	ldr	r3, [pc, #396]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0b8      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001950:	4b59      	ldr	r3, [pc, #356]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4a58      	ldr	r2, [pc, #352]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800195a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001968:	4b53      	ldr	r3, [pc, #332]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4a52      	ldr	r2, [pc, #328]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001972:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001974:	4b50      	ldr	r3, [pc, #320]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	494d      	ldr	r1, [pc, #308]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d040      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b47      	ldr	r3, [pc, #284]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d115      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e07f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	4b41      	ldr	r3, [pc, #260]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e073      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e06b      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d2:	4b39      	ldr	r3, [pc, #228]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f023 0203 	bic.w	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4936      	ldr	r1, [pc, #216]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e4:	f7fe fe84 	bl	80006f0 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f7fe fe80 	bl	80006f0 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e053      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 020c 	and.w	r2, r3, #12
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d1eb      	bne.n	80019ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4b27      	ldr	r3, [pc, #156]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d210      	bcs.n	8001a44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 0207 	bic.w	r2, r3, #7
 8001a2a:	4922      	ldr	r1, [pc, #136]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b20      	ldr	r3, [pc, #128]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e032      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a50:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4916      	ldr	r1, [pc, #88]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a6e:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	490e      	ldr	r1, [pc, #56]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a82:	f000 f821 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8001a86:	4602      	mov	r2, r0
 8001a88:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	490a      	ldr	r1, [pc, #40]	@ (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a94:	5ccb      	ldrb	r3, [r1, r3]
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1cc>)
 8001a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1d0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fde2 	bl	800066c <HAL_InitTick>

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40022000 	.word	0x40022000
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	080028fc 	.word	0x080028fc
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d002      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x30>
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d003      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0x36>
 8001af6:	e027      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001af8:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001afa:	613b      	str	r3, [r7, #16]
      break;
 8001afc:	e027      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	0c9b      	lsrs	r3, r3, #18
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	4a17      	ldr	r2, [pc, #92]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b08:	5cd3      	ldrb	r3, [r2, r3]
 8001b0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d010      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b16:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	0c5b      	lsrs	r3, r3, #17
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	4a11      	ldr	r2, [pc, #68]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b22:	5cd3      	ldrb	r3, [r2, r3]
 8001b24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b2a:	fb03 f202 	mul.w	r2, r3, r2
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e004      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	613b      	str	r3, [r7, #16]
      break;
 8001b46:	e002      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b4a:	613b      	str	r3, [r7, #16]
      break;
 8001b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b4e:	693b      	ldr	r3, [r7, #16]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	007a1200 	.word	0x007a1200
 8001b64:	08002914 	.word	0x08002914
 8001b68:	08002924 	.word	0x08002924
 8001b6c:	003d0900 	.word	0x003d0900

08001b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b74:	4b02      	ldr	r3, [pc, #8]	@ (8001b80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20000000 	.word	0x20000000

08001b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b88:	f7ff fff2 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4903      	ldr	r1, [pc, #12]	@ (8001ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	0800290c 	.word	0x0800290c

08001bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bb0:	f7ff ffde 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	0adb      	lsrs	r3, r3, #11
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	4903      	ldr	r1, [pc, #12]	@ (8001bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc2:	5ccb      	ldrb	r3, [r1, r3]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	0800290c 	.word	0x0800290c

08001bd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <RCC_Delay+0x34>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <RCC_Delay+0x38>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0a5b      	lsrs	r3, r3, #9
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bf0:	bf00      	nop
  }
  while (Delay --);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1e5a      	subs	r2, r3, #1
 8001bf6:	60fa      	str	r2, [r7, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f9      	bne.n	8001bf0 <RCC_Delay+0x1c>
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	10624dd3 	.word	0x10624dd3

08001c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d07d      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c30:	4b4f      	ldr	r3, [pc, #316]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10d      	bne.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	4a4b      	ldr	r2, [pc, #300]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c46:	61d3      	str	r3, [r2, #28]
 8001c48:	4b49      	ldr	r3, [pc, #292]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c54:	2301      	movs	r3, #1
 8001c56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	4b46      	ldr	r3, [pc, #280]	@ (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d118      	bne.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c64:	4b43      	ldr	r3, [pc, #268]	@ (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a42      	ldr	r2, [pc, #264]	@ (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c70:	f7fe fd3e 	bl	80006f0 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c76:	e008      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c78:	f7fe fd3a 	bl	80006f0 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	@ 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e06d      	b.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c96:	4b36      	ldr	r3, [pc, #216]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d02e      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d027      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cbc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cbe:	4b2e      	ldr	r3, [pc, #184]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cca:	4a29      	ldr	r2, [pc, #164]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d014      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7fe fd09 	bl	80006f0 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7fe fd05 	bl	80006f0 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e036      	b.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0ee      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d04:	4b1a      	ldr	r3, [pc, #104]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4917      	ldr	r1, [pc, #92]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d105      	bne.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1c:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	4a13      	ldr	r2, [pc, #76]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d34:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	490b      	ldr	r1, [pc, #44]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d008      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d52:	4b07      	ldr	r3, [pc, #28]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	4904      	ldr	r1, [pc, #16]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40007000 	.word	0x40007000
 8001d78:	42420440 	.word	0x42420440

08001d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e042      	b.n	8001e14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe fb92 	bl	80004cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2224      	movs	r2, #36	@ 0x24
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 fcd5 	bl	8002770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695a      	ldr	r2, [r3, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	4613      	mov	r3, r2
 8001e28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	d112      	bne.n	8001e5c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <HAL_UART_Receive_IT+0x26>
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00b      	b.n	8001e5e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 fab7 	bl	80023c6 <UART_Start_Receive_IT>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	e000      	b.n	8001e5e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001e5c:	2302      	movs	r3, #2
  }
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b0ba      	sub	sp, #232	@ 0xe8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10f      	bne.n	8001ece <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <HAL_UART_IRQHandler+0x66>
 8001eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fb93 	bl	80025f2 <UART_Receive_IT>
      return;
 8001ecc:	e25b      	b.n	8002386 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 80de 	beq.w	8002094 <HAL_UART_IRQHandler+0x22c>
 8001ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d106      	bne.n	8001ef2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ee8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80d1 	beq.w	8002094 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00b      	beq.n	8001f16 <HAL_UART_IRQHandler+0xae>
 8001efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	f043 0201 	orr.w	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_UART_IRQHandler+0xd2>
 8001f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	f043 0202 	orr.w	r2, r3, #2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_UART_IRQHandler+0xf6>
 8001f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	f043 0204 	orr.w	r2, r3, #4
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d011      	beq.n	8001f8e <HAL_UART_IRQHandler+0x126>
 8001f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d105      	bne.n	8001f82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f86:	f043 0208 	orr.w	r2, r3, #8
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 81f2 	beq.w	800237c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_UART_IRQHandler+0x14e>
 8001fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fb1e 	bl	80025f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <HAL_UART_IRQHandler+0x17a>
 8001fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d04f      	beq.n	8002082 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fa28 	bl	8002438 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d041      	beq.n	800207a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	3314      	adds	r3, #20
 8001ffc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002000:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002004:	e853 3f00 	ldrex	r3, [r3]
 8002008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800200c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002010:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002014:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3314      	adds	r3, #20
 800201e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002022:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800202a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800202e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002032:	e841 2300 	strex	r3, r2, [r1]
 8002036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800203a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1d9      	bne.n	8001ff6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002046:	2b00      	cmp	r3, #0
 8002048:	d013      	beq.n	8002072 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204e:	4a7e      	ldr	r2, [pc, #504]	@ (8002248 <HAL_UART_IRQHandler+0x3e0>)
 8002050:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe ffb6 	bl	8000fc8 <HAL_DMA_Abort_IT>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d016      	beq.n	8002090 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800206c:	4610      	mov	r0, r2
 800206e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002070:	e00e      	b.n	8002090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f993 	bl	800239e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002078:	e00a      	b.n	8002090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f98f 	bl	800239e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002080:	e006      	b.n	8002090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f98b 	bl	800239e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800208e:	e175      	b.n	800237c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002090:	bf00      	nop
    return;
 8002092:	e173      	b.n	800237c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002098:	2b01      	cmp	r3, #1
 800209a:	f040 814f 	bne.w	800233c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800209e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8148 	beq.w	800233c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80020ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8141 	beq.w	800233c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80b6 	beq.w	800224c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80020ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 8145 	beq.w	8002380 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80020fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80020fe:	429a      	cmp	r2, r3
 8002100:	f080 813e 	bcs.w	8002380 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800210a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	2b20      	cmp	r3, #32
 8002114:	f000 8088 	beq.w	8002228 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	330c      	adds	r3, #12
 800211e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002122:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002126:	e853 3f00 	ldrex	r3, [r3]
 800212a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800212e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002132:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002136:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	330c      	adds	r3, #12
 8002140:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002144:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002148:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800214c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002150:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002154:	e841 2300 	strex	r3, r2, [r1]
 8002158:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800215c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1d9      	bne.n	8002118 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	3314      	adds	r3, #20
 800216a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800216e:	e853 3f00 	ldrex	r3, [r3]
 8002172:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002174:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3314      	adds	r3, #20
 8002184:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002188:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800218c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002190:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002194:	e841 2300 	strex	r3, r2, [r1]
 8002198:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800219a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1e1      	bne.n	8002164 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3314      	adds	r3, #20
 80021a6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021aa:	e853 3f00 	ldrex	r3, [r3]
 80021ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80021b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3314      	adds	r3, #20
 80021c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80021c4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80021c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80021ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80021cc:	e841 2300 	strex	r3, r2, [r1]
 80021d0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80021d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e3      	bne.n	80021a0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	330c      	adds	r3, #12
 80021ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021f0:	e853 3f00 	ldrex	r3, [r3]
 80021f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80021f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021f8:	f023 0310 	bic.w	r3, r3, #16
 80021fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	330c      	adds	r3, #12
 8002206:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800220a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800220c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800220e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002210:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002212:	e841 2300 	strex	r3, r2, [r1]
 8002216:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1e3      	bne.n	80021e6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe fe95 	bl	8000f52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002236:	b29b      	uxth	r3, r3
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	b29b      	uxth	r3, r3
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f8b6 	bl	80023b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002244:	e09c      	b.n	8002380 <HAL_UART_IRQHandler+0x518>
 8002246:	bf00      	nop
 8002248:	080024fd 	.word	0x080024fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002254:	b29b      	uxth	r3, r3
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 808e 	beq.w	8002384 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8089 	beq.w	8002384 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	330c      	adds	r3, #12
 8002278:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800227a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800227c:	e853 3f00 	ldrex	r3, [r3]
 8002280:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002288:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	330c      	adds	r3, #12
 8002292:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002296:	647a      	str	r2, [r7, #68]	@ 0x44
 8002298:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800229a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800229c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800229e:	e841 2300 	strex	r3, r2, [r1]
 80022a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80022a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1e3      	bne.n	8002272 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	3314      	adds	r3, #20
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	e853 3f00 	ldrex	r3, [r3]
 80022b8:	623b      	str	r3, [r7, #32]
   return(result);
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3314      	adds	r3, #20
 80022ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80022ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80022d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80022d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022d6:	e841 2300 	strex	r3, r2, [r1]
 80022da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80022dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1e3      	bne.n	80022aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	330c      	adds	r3, #12
 80022f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	e853 3f00 	ldrex	r3, [r3]
 80022fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 0310 	bic.w	r3, r3, #16
 8002306:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	330c      	adds	r3, #12
 8002310:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002314:	61fa      	str	r2, [r7, #28]
 8002316:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002318:	69b9      	ldr	r1, [r7, #24]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	e841 2300 	strex	r3, r2, [r1]
 8002320:	617b      	str	r3, [r7, #20]
   return(result);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e3      	bne.n	80022f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800232e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002332:	4619      	mov	r1, r3
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f83b 	bl	80023b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800233a:	e023      	b.n	8002384 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800233c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002344:	2b00      	cmp	r3, #0
 8002346:	d009      	beq.n	800235c <HAL_UART_IRQHandler+0x4f4>
 8002348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800234c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f8e5 	bl	8002524 <UART_Transmit_IT>
    return;
 800235a:	e014      	b.n	8002386 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800235c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00e      	beq.n	8002386 <HAL_UART_IRQHandler+0x51e>
 8002368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800236c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f924 	bl	80025c2 <UART_EndTransmit_IT>
    return;
 800237a:	e004      	b.n	8002386 <HAL_UART_IRQHandler+0x51e>
    return;
 800237c:	bf00      	nop
 800237e:	e002      	b.n	8002386 <HAL_UART_IRQHandler+0x51e>
      return;
 8002380:	bf00      	nop
 8002382:	e000      	b.n	8002386 <HAL_UART_IRQHandler+0x51e>
      return;
 8002384:	bf00      	nop
  }
}
 8002386:	37e8      	adds	r7, #232	@ 0xe8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	4613      	mov	r3, r2
 80023d2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	88fa      	ldrh	r2, [r7, #6]
 80023de:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	88fa      	ldrh	r2, [r7, #6]
 80023e4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2222      	movs	r2, #34	@ 0x22
 80023f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800240a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0220 	orr.w	r2, r2, #32
 800242a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002438:	b480      	push	{r7}
 800243a:	b095      	sub	sp, #84	@ 0x54
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	330c      	adds	r3, #12
 8002446:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800244a:	e853 3f00 	ldrex	r3, [r3]
 800244e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002452:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	330c      	adds	r3, #12
 800245e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002460:	643a      	str	r2, [r7, #64]	@ 0x40
 8002462:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002464:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002466:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002468:	e841 2300 	strex	r3, r2, [r1]
 800246c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800246e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e5      	bne.n	8002440 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3314      	adds	r3, #20
 800247a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	e853 3f00 	ldrex	r3, [r3]
 8002482:	61fb      	str	r3, [r7, #28]
   return(result);
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	3314      	adds	r3, #20
 8002492:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002494:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002496:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002498:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800249a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800249c:	e841 2300 	strex	r3, r2, [r1]
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e5      	bne.n	8002474 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d119      	bne.n	80024e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	330c      	adds	r3, #12
 80024b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	e853 3f00 	ldrex	r3, [r3]
 80024be:	60bb      	str	r3, [r7, #8]
   return(result);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f023 0310 	bic.w	r3, r3, #16
 80024c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	330c      	adds	r3, #12
 80024ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024d0:	61ba      	str	r2, [r7, #24]
 80024d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d4:	6979      	ldr	r1, [r7, #20]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	e841 2300 	strex	r3, r2, [r1]
 80024dc:	613b      	str	r3, [r7, #16]
   return(result);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1e5      	bne.n	80024b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80024f2:	bf00      	nop
 80024f4:	3754      	adds	r7, #84	@ 0x54
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002508:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f7ff ff41 	bl	800239e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b21      	cmp	r3, #33	@ 0x21
 8002536:	d13e      	bne.n	80025b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002540:	d114      	bne.n	800256c <UART_Transmit_IT+0x48>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d110      	bne.n	800256c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800255e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	1c9a      	adds	r2, r3, #2
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	621a      	str	r2, [r3, #32]
 800256a:	e008      	b.n	800257e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	1c59      	adds	r1, r3, #1
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6211      	str	r1, [r2, #32]
 8002576:	781a      	ldrb	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002582:	b29b      	uxth	r3, r3
 8002584:	3b01      	subs	r3, #1
 8002586:	b29b      	uxth	r3, r3
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4619      	mov	r1, r3
 800258c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10f      	bne.n	80025b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
  }
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2220      	movs	r2, #32
 80025de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff fed2 	bl	800238c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b08c      	sub	sp, #48	@ 0x30
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b22      	cmp	r3, #34	@ 0x22
 8002604:	f040 80ae 	bne.w	8002764 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002610:	d117      	bne.n	8002642 <UART_Receive_IT+0x50>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d113      	bne.n	8002642 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800261a:	2300      	movs	r3, #0
 800261c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002622:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	b29b      	uxth	r3, r3
 800262c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002630:	b29a      	uxth	r2, r3
 8002632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002634:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263a:	1c9a      	adds	r2, r3, #2
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002640:	e026      	b.n	8002690 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002648:	2300      	movs	r3, #0
 800264a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002654:	d007      	beq.n	8002666 <UART_Receive_IT+0x74>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <UART_Receive_IT+0x82>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e008      	b.n	8002686 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002680:	b2da      	uxtb	r2, r3
 8002682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002684:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29b      	uxth	r3, r3
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4619      	mov	r1, r3
 800269e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d15d      	bne.n	8002760 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0220 	bic.w	r2, r2, #32
 80026b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d135      	bne.n	8002756 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	330c      	adds	r3, #12
 80026f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	e853 3f00 	ldrex	r3, [r3]
 80026fe:	613b      	str	r3, [r7, #16]
   return(result);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f023 0310 	bic.w	r3, r3, #16
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	330c      	adds	r3, #12
 800270e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002710:	623a      	str	r2, [r7, #32]
 8002712:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002714:	69f9      	ldr	r1, [r7, #28]
 8002716:	6a3a      	ldr	r2, [r7, #32]
 8002718:	e841 2300 	strex	r3, r2, [r1]
 800271c:	61bb      	str	r3, [r7, #24]
   return(result);
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1e5      	bne.n	80026f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b10      	cmp	r3, #16
 8002730:	d10a      	bne.n	8002748 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800274c:	4619      	mov	r1, r3
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff fe2e 	bl	80023b0 <HAL_UARTEx_RxEventCallback>
 8002754:	e002      	b.n	800275c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fd fcfe 	bl	8000158 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	e002      	b.n	8002766 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3730      	adds	r7, #48	@ 0x30
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80027aa:	f023 030c 	bic.w	r3, r3, #12
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	430b      	orrs	r3, r1
 80027b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002884 <UART_SetConfig+0x114>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d103      	bne.n	80027e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027d8:	f7ff f9e8 	bl	8001bac <HAL_RCC_GetPCLK2Freq>
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	e002      	b.n	80027e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027e0:	f7ff f9d0 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 80027e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	009a      	lsls	r2, r3, #2
 80027f0:	441a      	add	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	4a22      	ldr	r2, [pc, #136]	@ (8002888 <UART_SetConfig+0x118>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	0119      	lsls	r1, r3, #4
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	009a      	lsls	r2, r3, #2
 8002810:	441a      	add	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	fbb2 f2f3 	udiv	r2, r2, r3
 800281c:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <UART_SetConfig+0x118>)
 800281e:	fba3 0302 	umull	r0, r3, r3, r2
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	2064      	movs	r0, #100	@ 0x64
 8002826:	fb00 f303 	mul.w	r3, r0, r3
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	3332      	adds	r3, #50	@ 0x32
 8002830:	4a15      	ldr	r2, [pc, #84]	@ (8002888 <UART_SetConfig+0x118>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800283c:	4419      	add	r1, r3
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	009a      	lsls	r2, r3, #2
 8002848:	441a      	add	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	fbb2 f2f3 	udiv	r2, r2, r3
 8002854:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <UART_SetConfig+0x118>)
 8002856:	fba3 0302 	umull	r0, r3, r3, r2
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	2064      	movs	r0, #100	@ 0x64
 800285e:	fb00 f303 	mul.w	r3, r0, r3
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	3332      	adds	r3, #50	@ 0x32
 8002868:	4a07      	ldr	r2, [pc, #28]	@ (8002888 <UART_SetConfig+0x118>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	f003 020f 	and.w	r2, r3, #15
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	440a      	add	r2, r1
 800287a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40013800 	.word	0x40013800
 8002888:	51eb851f 	.word	0x51eb851f

0800288c <memset>:
 800288c:	4603      	mov	r3, r0
 800288e:	4402      	add	r2, r0
 8002890:	4293      	cmp	r3, r2
 8002892:	d100      	bne.n	8002896 <memset+0xa>
 8002894:	4770      	bx	lr
 8002896:	f803 1b01 	strb.w	r1, [r3], #1
 800289a:	e7f9      	b.n	8002890 <memset+0x4>

0800289c <__libc_init_array>:
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	2600      	movs	r6, #0
 80028a0:	4d0c      	ldr	r5, [pc, #48]	@ (80028d4 <__libc_init_array+0x38>)
 80028a2:	4c0d      	ldr	r4, [pc, #52]	@ (80028d8 <__libc_init_array+0x3c>)
 80028a4:	1b64      	subs	r4, r4, r5
 80028a6:	10a4      	asrs	r4, r4, #2
 80028a8:	42a6      	cmp	r6, r4
 80028aa:	d109      	bne.n	80028c0 <__libc_init_array+0x24>
 80028ac:	f000 f81a 	bl	80028e4 <_init>
 80028b0:	2600      	movs	r6, #0
 80028b2:	4d0a      	ldr	r5, [pc, #40]	@ (80028dc <__libc_init_array+0x40>)
 80028b4:	4c0a      	ldr	r4, [pc, #40]	@ (80028e0 <__libc_init_array+0x44>)
 80028b6:	1b64      	subs	r4, r4, r5
 80028b8:	10a4      	asrs	r4, r4, #2
 80028ba:	42a6      	cmp	r6, r4
 80028bc:	d105      	bne.n	80028ca <__libc_init_array+0x2e>
 80028be:	bd70      	pop	{r4, r5, r6, pc}
 80028c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c4:	4798      	blx	r3
 80028c6:	3601      	adds	r6, #1
 80028c8:	e7ee      	b.n	80028a8 <__libc_init_array+0xc>
 80028ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ce:	4798      	blx	r3
 80028d0:	3601      	adds	r6, #1
 80028d2:	e7f2      	b.n	80028ba <__libc_init_array+0x1e>
 80028d4:	08002928 	.word	0x08002928
 80028d8:	08002928 	.word	0x08002928
 80028dc:	08002928 	.word	0x08002928
 80028e0:	0800292c 	.word	0x0800292c

080028e4 <_init>:
 80028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e6:	bf00      	nop
 80028e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ea:	bc08      	pop	{r3}
 80028ec:	469e      	mov	lr, r3
 80028ee:	4770      	bx	lr

080028f0 <_fini>:
 80028f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f2:	bf00      	nop
 80028f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f6:	bc08      	pop	{r3}
 80028f8:	469e      	mov	lr, r3
 80028fa:	4770      	bx	lr
